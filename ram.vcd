$version Generated by VerilatedVcd $end
$date Wed Apr  5 00:06:59 2017
 $end
$timescale 1ns $end

 $scope module TOP $end
  $var wire  4 7 addr [3:0] $end
  $var wire  1 4 clk $end
  $var wire  4 8 datain [3:0] $end
  $var wire  4 9 dataout [3:0] $end
  $var wire  1 5 rst $end
  $var wire  1 6 rw $end
  $scope module v $end
   $var wire 32 < READ [31:0] $end
   $var wire 32 ; WRITE [31:0] $end
   $var wire  4 7 addr [3:0] $end
   $var wire 32 : addr_width [31:0] $end
   $var wire  1 4 clk $end
   $var wire  4 # data(0) [3:0] $end
   $var wire  4 $ data(1) [3:0] $end
   $var wire  4 - data(10) [3:0] $end
   $var wire  4 . data(11) [3:0] $end
   $var wire  4 / data(12) [3:0] $end
   $var wire  4 0 data(13) [3:0] $end
   $var wire  4 1 data(14) [3:0] $end
   $var wire  4 2 data(15) [3:0] $end
   $var wire  4 % data(2) [3:0] $end
   $var wire  4 & data(3) [3:0] $end
   $var wire  4 ' data(4) [3:0] $end
   $var wire  4 ( data(5) [3:0] $end
   $var wire  4 ) data(6) [3:0] $end
   $var wire  4 * data(7) [3:0] $end
   $var wire  4 + data(8) [3:0] $end
   $var wire  4 , data(9) [3:0] $end
   $var wire 32 : data_width [31:0] $end
   $var wire  4 8 datain [3:0] $end
   $var wire  4 9 dataout [3:0] $end
   $var wire  4 3 i [3:0] $end
   $var wire  1 5 rst $end
   $var wire  1 6 rw $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b0000 $
b0000 %
b0000 &
b0000 '
b0000 (
b0000 )
b0000 *
b0000 +
b0000 ,
b0000 -
b0000 .
b0000 /
b0000 0
b0000 1
b0000 2
b0000 3
04
05
16
b0000 7
b0000 8
b0000 9
b00000000000000000000000000000100 :
b00000000000000000000000000000001 ;
b00000000000000000000000000000000 <
#1
b0111 #
14
b0111 8
b0111 9
#2
04
b0001 7
b0110 8
#3
b1001 $
14
b1001 8
b1001 9
#4
04
b0010 7
b0011 8
#5
b0001 %
14
b0001 8
b0001 9
#6
04
b0011 7
b1111 8
#7
b1010 &
14
b1010 8
b1010 9
#8
04
b0100 7
b1100 8
#9
b1001 '
14
b1001 8
b1001 9
#10
04
b0101 7
b1101 8
#11
b1010 (
14
b1010 8
b1010 9
#12
04
b0110 7
b1011 8
#13
b0010 )
14
b0010 8
b0010 9
#14
04
b0111 7
b1011 8
#15
b0011 *
14
b0011 8
b0011 9
#16
04
b1000 7
b0110 8
#17
b1100 +
14
b1100 8
b1100 9
#18
04
b1001 7
b0010 8
#19
b0100 ,
14
b0100 8
b0100 9
#20
04
b1010 7
b1000 8
#21
b1011 -
14
b1011 8
b1011 9
#22
04
b1011 7
b1000 8
#23
b0111 .
14
b0111 8
b0111 9
#24
04
b1100 7
b1101 8
#25
b0110 /
14
b0110 8
b0110 9
#26
04
b1101 7
b1010 8
#27
b1110 0
14
b1110 8
b1110 9
#28
04
b1110 7
b0011 8
#29
b0011 1
14
b0011 9
#30
04
b1111 7
b1111 8
#31
b1001 2
14
b1001 8
b1001 9
#32
04
b0000 7
b1010 8
#33
14
b1010 9
#34
06
b0111 9
#35
04
#36
14
b0001 7
b1001 9
#37
04
#38
14
b0010 7
b0001 9
#39
04
#40
14
b0011 7
b1010 9
#41
04
#42
14
b0100 7
b1001 9
#43
04
#44
14
b0101 7
b1010 9
#45
04
#46
14
b0110 7
b0010 9
#47
04
#48
14
b0111 7
b0011 9
#49
04
#50
14
b1000 7
b1100 9
#51
04
#52
14
b1001 7
b0100 9
#53
04
#54
14
b1010 7
b1011 9
#55
04
#56
14
b1011 7
b0111 9
#57
04
#58
14
b1100 7
b0110 9
#59
04
#60
14
b1101 7
b1110 9
#61
04
#62
14
b1110 7
b0011 9
#63
04
#64
14
b1111 7
b1001 9
#65
04
#66
14
b0000 7
b0000 9
#67
04
#68
14
#69
b0000 #
b0000 $
b0000 %
b0000 &
b0000 '
b0000 (
b0000 )
b0000 *
b0000 +
b0000 ,
b0000 -
b0000 .
b0000 /
b0000 0
b0000 1
b0000 2
b1111 3
04
15
#70
14
05
#71
04
#72
14
