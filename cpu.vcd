$version Generated by VerilatedVcd $end
$date Mon Nov 24 17:42:58 2014
 $end
$timescale 1ns $end

 $scope module TOP $end
  $var wire  4 ? a [3:0] $end
  $var wire  1 < clk $end
  $var wire  8 > instruction [7:0] $end
  $var wire  1 = rst $end
  $scope module v $end
   $var wire 32 D DECODE [31:0] $end
   $var wire 32 E EXECUTE [31:0] $end
   $var wire 32 C FETCH [31:0] $end
   $var wire 32 B START [31:0] $end
   $var wire 32 @ WAIT [31:0] $end
   $var wire  4 ? a [3:0] $end
   $var wire 32 E addaxx [31:0] $end
   $var wire  4 6 addr [3:0] $end
   $var wire 32 @ addr_width [31:0] $end
   $var wire 32 D andaxx [31:0] $end
   $var wire  1 < clk $end
   $var wire  4 ; currentState [3:0] $end
   $var wire 32 @ data_width [31:0] $end
   $var wire  4 5 datain [3:0] $end
   $var wire  4 : dataout [3:0] $end
   $var wire  1 9 dir $end
   $var wire  8 > instruction [7:0] $end
   $var wire  8 8 ir [7:0] $end
   $var wire 32 G jmpxx [31:0] $end
   $var wire 32 F jzxx [31:0] $end
   $var wire 32 B ldaxx [31:0] $end
   $var wire 32 C ldxxa [31:0] $end
   $var wire 32 A movaxx [31:0] $end
   $var wire 32 I nandaxx [31:0] $end
   $var wire  4 # nextState [3:0] $end
   $var wire 32 H nop [31:0] $end
   $var wire 32 K noraxx [31:0] $end
   $var wire 32 N nota [31:0] $end
   $var wire 32 @ op_param [31:0] $end
   $var wire 32 @ op_width [31:0] $end
   $var wire 32 J oraxx [31:0] $end
   $var wire  8 7 pc [7:0] $end
   $var wire 32 A pc_width [31:0] $end
   $var wire  1 = rst $end
   $var wire 32 @ subaxx [31:0] $end
   $var wire 32 M xnoraxx [31:0] $end
   $var wire 32 L xoraxx [31:0] $end
   $scope module cpu_mem $end
    $var wire 32 B READ [31:0] $end
    $var wire 32 C WRITE [31:0] $end
    $var wire  4 6 addr [3:0] $end
    $var wire 32 @ addr_width [31:0] $end
    $var wire  1 < clk $end
    $var wire  4 $ data(0) [3:0] $end
    $var wire  4 % data(1) [3:0] $end
    $var wire  4 . data(10) [3:0] $end
    $var wire  4 / data(11) [3:0] $end
    $var wire  4 0 data(12) [3:0] $end
    $var wire  4 1 data(13) [3:0] $end
    $var wire  4 2 data(14) [3:0] $end
    $var wire  4 3 data(15) [3:0] $end
    $var wire  4 & data(2) [3:0] $end
    $var wire  4 ' data(3) [3:0] $end
    $var wire  4 ( data(4) [3:0] $end
    $var wire  4 ) data(5) [3:0] $end
    $var wire  4 * data(6) [3:0] $end
    $var wire  4 + data(7) [3:0] $end
    $var wire  4 , data(8) [3:0] $end
    $var wire  4 - data(9) [3:0] $end
    $var wire 32 @ data_width [31:0] $end
    $var wire  4 5 datain [3:0] $end
    $var wire  4 : dataout [3:0] $end
    $var wire  4 4 i [3:0] $end
    $var wire  1 = rst $end
    $var wire  1 9 rw $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000 #
b0000 $
b0000 %
b0000 &
b0000 '
b0000 (
b0000 )
b0000 *
b0000 +
b0000 ,
b0000 -
b0000 .
b0000 /
b0000 0
b0000 1
b0000 2
b0000 3
b0000 4
b0000 5
b0000 6
b00000000 7
b00000000 8
09
b0000 :
b0000 ;
b10000001 >
b0000 ?
0<
0=
b00000000000000000000000000001000 A
b00000000000000000000000000000010 D
b00000000000000000000000000000011 E
b00000000000000000000000000000101 F
b00000000000000000000000000000110 G
b00000000000000000000000000000111 H
b00000000000000000000000000001001 I
b00000000000000000000000000001010 J
b00000000000000000000000000001011 K
b00000000000000000000000000001100 L
b00000000000000000000000000001101 M
b00000000000000000000000000001110 N
b00000000000000000000000000000100 @
b00000000000000000000000000000001 C
b00000000000000000000000000000000 B
#1
b0010 #
b0001 ;
1<
#2
0<
#3
b0011 #
b0001 6
b00000001 7
b10000001 8
b0010 ;
1<
#4
0<
#5
b0100 #
b0011 ;
1<
#6
0<
#7
b0001 #
b0100 ;
b0001 ?
1<
#8
b00010101 >
0<
#9
b0010 #
b0001 ;
1<
#10
0<
#11
b0011 #
b0101 6
b00000010 7
b00010101 8
b0010 ;
1<
#12
0<
#13
b0100 #
b0011 ;
1<
#14
0<
#15
b0001 #
b0001 5
19
b0100 ;
1<
#16
b10000010 >
0<
#17
b0010 #
b0001 )
b0001 :
b0001 ;
1<
#18
0<
#19
b0011 #
b0010 6
b00000011 7
b10000010 8
09
b0010 ;
1<
#20
0<
#21
b0100 #
b0000 :
b0011 ;
1<
#22
0<
#23
b0001 #
b0100 ;
b0010 ?
1<
#24
b00010100 >
0<
#25
b0010 #
b0001 ;
1<
#26
0<
#27
b0011 #
b0100 6
b00000100 7
b00010100 8
b0010 ;
1<
#28
0<
#29
b0100 #
b0011 ;
1<
#30
0<
#31
b0001 #
b0010 5
19
b0100 ;
1<
#32
b00000101 >
0<
#33
b0010 #
b0010 (
b0010 :
b0001 ;
1<
#34
0<
#35
b0011 #
b0101 6
b00000101 7
b00000101 8
09
b0010 ;
1<
#36
0<
#37
b0100 #
b0001 :
b0011 ;
1<
#38
0<
#39
b0001 #
b0100 ;
b0001 ?
1<
#40
b00010110 >
0<
#41
b0010 #
b0001 ;
1<
#42
0<
#43
b0011 #
b0110 6
b00000110 7
b00010110 8
b0010 ;
1<
#44
0<
#45
b0100 #
b0000 :
b0011 ;
1<
#46
0<
#47
b0001 #
b0001 5
19
b0100 ;
1<
#48
b00000100 >
0<
#49
b0010 #
b0001 *
b0001 :
b0001 ;
1<
#50
0<
#51
b0011 #
b0100 6
b00000111 7
b00000100 8
09
b0010 ;
1<
#52
0<
#53
b0100 #
b0010 :
b0011 ;
1<
#54
0<
#55
b0001 #
b0100 ;
b0010 ?
1<
#56
b00000011 >
0<
#57
b0010 #
b0001 ;
1<
#58
0<
#59
b0011 #
b0011 6
b00001000 7
b00000011 8
b0010 ;
1<
#60
0<
#61
b0100 #
b0000 :
b0011 ;
1<
#62
0<
#63
b0001 #
b0100 ;
b0000 ?
1<
#64
b00000101 >
0<
#65
b0010 #
b0001 ;
1<
#66
0<
#67
b0011 #
b0101 6
b00001001 7
b00000101 8
b0010 ;
1<
#68
0<
#69
b0100 #
b0001 :
b0011 ;
1<
#70
0<
#71
b0001 #
b0100 ;
b0001 ?
1<
#72
b00100000 >
0<
#73
b0010 #
b0001 ;
1<
#74
0<
#75
b0011 #
b0000 6
b00001010 7
b00100000 8
b0010 ;
1<
#76
0<
#77
b0100 #
b0000 :
b0011 ;
1<
#78
0<
#79
b0001 #
b0100 ;
b0000 ?
1<
#80
b00000100 >
0<
#81
b0010 #
b0001 ;
1<
#82
0<
#83
b0011 #
b0100 6
b00001011 7
b00000100 8
b0010 ;
1<
#84
0<
#85
b0100 #
b0010 :
b0011 ;
1<
#86
0<
#87
b0001 #
b0100 ;
b0010 ?
1<
#88
b00100100 >
0<
#89
b0010 #
b0001 ;
1<
#90
0<
#91
b0011 #
b00001100 7
b00100100 8
b0010 ;
1<
#92
0<
#93
b0100 #
b0011 ;
1<
#94
0<
#95
b0001 #
b0100 ;
1<
#96
b00110100 >
0<
#97
b0010 #
b0001 ;
1<
#98
0<
#99
b0011 #
b00001101 7
b00110100 8
b0010 ;
1<
#100
0<
#101
b0100 #
b0011 ;
1<
#102
0<
#103
b0001 #
b0100 ;
b0100 ?
1<
#104
b01000100 >
0<
#105
b0010 #
b0001 ;
1<
#106
0<
#107
b0011 #
b00001110 7
b01000100 8
b0010 ;
1<
#108
0<
#109
b0100 #
b0011 ;
1<
#110
0<
#111
b0001 #
b0100 ;
b0010 ?
1<
#112
b10000000 >
0<
#113
b0010 #
b0001 ;
1<
#114
0<
#115
b0011 #
b0000 6
b00001111 7
b10000000 8
b0010 ;
1<
#116
0<
#117
b0100 #
b0000 :
b0011 ;
1<
#118
0<
#119
b0001 #
b0100 ;
b0000 ?
1<
#120
b01011010 >
0<
#121
b0010 #
b0001 ;
1<
#122
0<
#123
b0011 #
b1010 6
b00010000 7
b01011010 8
b0010 ;
1<
#124
0<
#125
b0100 #
b0011 ;
1<
#126
0<
#127
b0001 #
b00001010 7
b0100 ;
1<
#128
b10000001 >
0<
#129
b0010 #
b0001 ;
1<
#130
0<
#131
b0011 #
b0001 6
b00001011 7
b10000001 8
b0010 ;
1<
#132
0<
#133
b0100 #
b0011 ;
1<
#134
0<
#135
b0001 #
b0100 ;
b0001 ?
1<
#136
b01011010 >
0<
#137
b0010 #
b0001 ;
1<
#138
0<
#139
b0011 #
b1010 6
b00001100 7
b01011010 8
b0010 ;
1<
#140
0<
#141
b0100 #
b0011 ;
1<
#142
0<
#143
b0001 #
b0100 ;
1<
#144
0<
#145
b0010 #
b0001 ;
1<
#146
0<
#147
b0011 #
b00001101 7
b0010 ;
1<
#148
0<
#149
b0100 #
b0011 ;
1<
#150
0<
#151
b0001 #
b0100 ;
1<
#152
0<
#153
b0010 #
b0001 ;
1<
#154
0<
#155
b0011 #
b00001110 7
b0010 ;
1<
#156
0<
#157
b0100 #
b0011 ;
1<
#158
0<
#159
b0001 #
b0100 ;
1<
#160
b01101010 >
0<
#161
b0010 #
b0001 ;
1<
#162
0<
#163
b0011 #
b00001111 7
b01101010 8
b0010 ;
1<
#164
0<
#165
b0100 #
b0011 ;
1<
#166
0<
#167
b0001 #
b00001010 7
b0100 ;
1<
#168
b10000101 >
0<
#169
b0010 #
b0001 ;
1<
#170
0<
#171
b0011 #
b0101 6
b00001011 7
b10000101 8
b0010 ;
1<
#172
0<
#173
b0100 #
b0001 :
b0011 ;
1<
#174
0<
#175
b0001 #
b0100 ;
b0101 ?
1<
#176
b00010000 >
0<
#177
b0010 #
b0001 ;
1<
#178
0<
#179
b0011 #
b0000 6
b00001100 7
b00010000 8
b0010 ;
1<
#180
0<
#181
b0100 #
b0000 :
b0011 ;
1<
#182
0<
#183
b0001 #
b0101 5
19
b0100 ;
1<
#184
b10000001 >
0<
#185
b0010 #
b0101 $
b0101 :
b0001 ;
1<
#186
0<
#187
b0011 #
b0001 6
b00001101 7
b10000001 8
09
b0010 ;
1<
#188
0<
#189
b0100 #
b0000 :
b0011 ;
1<
#190
0<
#191
b0001 #
b0100 ;
b0001 ?
1<
#192
b00100000 >
0<
#193
b0010 #
b0001 ;
1<
#194
0<
#195
b0011 #
b0000 6
b00001110 7
b00100000 8
b0010 ;
1<
#196
0<
#197
b0100 #
b0101 :
b0011 ;
1<
#198
0<
#199
b0001 #
b0100 ;
1<
#200
b10010101 >
0<
#201
b0010 #
b0001 ;
1<
#202
0<
#203
b0011 #
b0101 6
b00001111 7
b10010101 8
b0010 ;
1<
#204
0<
#205
b0100 #
b0001 :
b0011 ;
1<
#206
0<
#207
b0001 #
b0100 ;
b1110 ?
1<
#208
b10110000 >
0<
#209
b0010 #
b0001 ;
1<
#210
0<
#211
b0011 #
b0000 6
b00010000 7
b10110000 8
b0010 ;
1<
#212
0<
#213
b0100 #
b0101 :
b0011 ;
1<
#214
0<
#215
b0001 #
b0100 ;
b0000 ?
1<
#216
b10100100 >
0<
#217
b0010 #
b0001 ;
1<
#218
0<
#219
b0011 #
b0100 6
b00010001 7
b10100100 8
b0010 ;
1<
#220
0<
#221
b0100 #
b0010 :
b0011 ;
1<
#222
0<
#223
b0001 #
b0100 ;
b0010 ?
1<
#224
b11000000 >
0<
#225
b0010 #
b0001 ;
1<
#226
0<
#227
b0011 #
b0000 6
b00010010 7
b11000000 8
b0010 ;
1<
#228
0<
#229
b0100 #
b0101 :
b0011 ;
1<
#230
0<
#231
b0001 #
b0100 ;
b0111 ?
1<
#232
b11010000 >
0<
#233
b0010 #
b0001 ;
1<
#234
0<
#235
b0011 #
b00010011 7
b11010000 8
b0010 ;
1<
#236
0<
#237
b0100 #
b0011 ;
1<
#238
0<
#239
b0001 #
b0100 ;
b1101 ?
1<
#240
b11100000 >
0<
#241
b0010 #
b0001 ;
1<
#242
0<
#243
b0011 #
b00010100 7
b11100000 8
b0010 ;
1<
#244
0<
#245
b0100 #
b0011 ;
1<
#246
0<
#247
b0001 #
b0100 ;
b0010 ?
1<
#248
0<
1=
#249
b0000 $
b0000 (
b0000 )
b0000 *
b1111 4
b0000 :
b0000 ;
1<
#250
b01110000 >
0<
0=
#251
b0010 #
b0000 5
b00000000 7
b00000000 8
b0001 ;
b0000 ?
1<
#252
0<
#253
b0100 #
b00000001 7
b01110000 8
b0010 ;
1<
#254
0<
#255
b0001 #
b0100 ;
1<
#256
0<
#257
b0010 #
b0001 ;
1<
#258
0<
#259
b0100 #
b00000010 7
b0010 ;
1<
#260
0<
#261
b0001 #
b0100 ;
1<
#262
0<
#263
b0010 #
b0001 ;
1<
#264
0<
#265
b0100 #
b00000011 7
b0010 ;
1<
